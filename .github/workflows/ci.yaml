name: CI - Build, Push Images and Run Tests
#
# Este flujo de trabajo se encarga de construir y subir imágenes de Docker para Angular y Spring Boot,
# así como de ejecutar pruebas unitarias y configurar Rancher-desktop.

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: self-hosted

    steps:
    # Paso 1: Clonar el repositorio
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        path: .

    # Paso Intermedio: Configurar JDK 17
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'adopt'

    # Paso 2: Inspeccionar la estructura del directorio
    - name: Debug directory structure
      run: |
        echo "Contenido de mywork:"
        ls -l /mnt/c/Users/jose.i.marin.ghalem/actions-runner/mywork
      
        echo "Contenido de mywork/training-devops-selfhosted/training-devops-selfhosted:"
        ls -l /mnt/c/Users/jose.i.marin.ghalem/actions-runner/mywork/training-devops-selfhosted/training-devops-selfhosted

        echo "Contenido de mywork/training-devops-selfhosted/training-devops-selfhosted/training-angular/helloworld1:"
        ls -l /mnt/c/Users/jose.i.marin.ghalem/actions-runner/mywork/training-devops-selfhosted/training-devops-selfhosted/training-angular/helloworld1 || echo "helloworld no existe"
        
        echo "Contenido de mywork/training-devops-selfhosted/training-devops-selfhosted/training-spring-boot/helloworld:"
        ls -l /mnt/c/Users/jose.i.marin.ghalem/actions-runner/mywork/training-devops-selfhosted/training-devops-selfhosted/training-spring-boot/helloworld || echo "helloworld1 no existe"

    # Paso 3: Iniciar sesión en Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # Paso 4: Construir y subir la imagen de Angular
    - name: Build and push Angular image
      working-directory: /mnt/c/Users/jose.i.marin.ghalem/actions-runner/mywork/training-devops-selfhosted/training-devops-selfhosted/training-angular/helloworld1
      run: |
        docker build -t ismaelmrn/training-angular:0.0.1 .
        docker push ismaelmrn/training-angular:0.0.1

    # Paso 5: Construir y subir la imagen de Spring Boot
    - name: Build and push Spring Boot image
      working-directory: /mnt/c/Users/jose.i.marin.ghalem/actions-runner/mywork/training-devops-selfhosted/training-devops-selfhosted/training-spring-boot/helloworld
      run: |
        mvn clean package
        docker build -t ismaelmrn/training-spring-boot:0.0.1 .
        docker push ismaelmrn/training-spring-boot:0.0.1

    # Paso 6: Ejecutar pruebas unitarias para Angular
    - name: Run Angular unit tests
      working-directory: /mnt/c/Users/jose.i.marin.ghalem/actions-runner/mywork/training-devops-selfhosted/training-devops-selfhosted/training-angular/helloworld1
      run: |
        npm install
        npm test -- --watch=false --browsers=ChromeHeadless

    # Paso 7: Ejecutar pruebas unitarias para Spring Boot
    - name: Run Spring Boot unit tests
      working-directory: /mnt/c/Users/jose.i.marin.ghalem/actions-runner/mywork/training-devops-selfhosted/training-devops-selfhosted/training-spring-boot/helloworld
      run: |
        mvn test

    # Paso 8: Configurar kubectl& rancher-desktop
    - name: Configure kubeconfig
      run: |
        mkdir -p ~/.kube
        cp /mnt/c/Users/jose.i.marin.ghalem/.kube/config ~/.kube/config
        kubectl config use-context rancher-desktop
        kubectl config current-context
        kubectl cluster-info
    